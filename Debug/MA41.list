
MA41.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000291c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae4  08002ae4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08002af8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002af8  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d861  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ddd  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  0002f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b92  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c76  00000000  00000000  0003112a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113fd  00000000  00000000  00056da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3c1  00000000  00000000  0006819d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e74  00000000  00000000  00154560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001583d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a8c 	.word	0x08002a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002a8c 	.word	0x08002a8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 faf5 	bl	80007ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f928 	bl	8000428 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f856 	bl	8000288 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001dc:	f000 f892 	bl	8000304 <MX_I2C2_Init>
  MX_TIM2_Init();
 80001e0:	f000 f8ce 	bl	8000380 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); // инверсия вывода PC13
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <main+0x30>)
 80001ea:	f000 fe27 	bl	8000e3c <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80001ee:	20c8      	movs	r0, #200	; 0xc8
 80001f0:	f000 fb58 	bl	80008a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9); // инверсия вывода PC13
 80001f4:	e7f6      	b.n	80001e4 <main+0x1c>
 80001f6:	bf00      	nop
 80001f8:	48000800 	.word	0x48000800

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b096      	sub	sp, #88	; 0x58
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0314 	add.w	r3, r7, #20
 8000206:	2244      	movs	r2, #68	; 0x44
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fc12 	bl	8002a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800021e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000222:	f000 ff65 	bl	80010f0 <HAL_PWREx_ControlVoltageScaling>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022c:	f000 f954 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000230:	2310      	movs	r3, #16
 8000232:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000234:	2301      	movs	r3, #1
 8000236:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023c:	2360      	movs	r3, #96	; 0x60
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000240:	2300      	movs	r3, #0
 8000242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	4618      	mov	r0, r3
 800024a:	f000 ffa7 	bl	800119c <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000254:	f000 f940 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800025c:	2300      	movs	r3, #0
 800025e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026c:	463b      	mov	r3, r7
 800026e:	2100      	movs	r1, #0
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fb6f 	bl	8001954 <HAL_RCC_ClockConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800027c:	f000 f92c 	bl	80004d8 <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3758      	adds	r7, #88	; 0x58
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <MX_I2C1_Init+0x74>)
 800028e:	4a1c      	ldr	r2, [pc, #112]	; (8000300 <MX_I2C1_Init+0x78>)
 8000290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <MX_I2C1_Init+0x74>)
 8000294:	f640 6214 	movw	r2, #3604	; 0xe14
 8000298:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_I2C1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_I2C1_Init+0x74>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_I2C1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <MX_I2C1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002b2:	4b12      	ldr	r3, [pc, #72]	; (80002fc <MX_I2C1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_I2C1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_I2C1_Init+0x74>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <MX_I2C1_Init+0x74>)
 80002c6:	f000 fdd3 	bl	8000e70 <HAL_I2C_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f902 	bl	80004d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002d4:	2100      	movs	r1, #0
 80002d6:	4809      	ldr	r0, [pc, #36]	; (80002fc <MX_I2C1_Init+0x74>)
 80002d8:	f000 fe65 	bl	8000fa6 <HAL_I2CEx_ConfigAnalogFilter>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002e2:	f000 f8f9 	bl	80004d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002e6:	2100      	movs	r1, #0
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <MX_I2C1_Init+0x74>)
 80002ea:	f000 fea7 	bl	800103c <HAL_I2CEx_ConfigDigitalFilter>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002f4:	f000 f8f0 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000028 	.word	0x20000028
 8000300:	40005400 	.word	0x40005400

08000304 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_I2C2_Init+0x74>)
 800030a:	4a1c      	ldr	r2, [pc, #112]	; (800037c <MX_I2C2_Init+0x78>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800030e:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <MX_I2C2_Init+0x74>)
 8000310:	f640 6214 	movw	r2, #3604	; 0xe14
 8000314:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_I2C2_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031c:	4b16      	ldr	r3, [pc, #88]	; (8000378 <MX_I2C2_Init+0x74>)
 800031e:	2201      	movs	r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_I2C2_Init+0x74>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_I2C2_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C2_Init+0x74>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_I2C2_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C2_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_I2C2_Init+0x74>)
 8000342:	f000 fd95 	bl	8000e70 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f8c4 	bl	80004d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000350:	2100      	movs	r1, #0
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <MX_I2C2_Init+0x74>)
 8000354:	f000 fe27 	bl	8000fa6 <HAL_I2CEx_ConfigAnalogFilter>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800035e:	f000 f8bb 	bl	80004d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000362:	2100      	movs	r1, #0
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C2_Init+0x74>)
 8000366:	f000 fe69 	bl	800103c <HAL_I2CEx_ConfigDigitalFilter>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000370:	f000 f8b2 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000007c 	.word	0x2000007c
 800037c:	40005800 	.word	0x40005800

08000380 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08c      	sub	sp, #48	; 0x30
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2224      	movs	r2, #36	; 0x24
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f002 fb50 	bl	8002a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	463b      	mov	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003b4:	f04f 32ff 	mov.w	r2, #4294967295
 80003b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80003c6:	2303      	movs	r3, #3
 80003c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003da:	2300      	movs	r3, #0
 80003dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003de:	2301      	movs	r3, #1
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <MX_TIM2_Init+0xa4>)
 80003f2:	f002 f957 	bl	80026a4 <HAL_TIM_Encoder_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80003fc:	f000 f86c 	bl	80004d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000408:	463b      	mov	r3, r7
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_TIM2_Init+0xa4>)
 800040e:	f002 fa89 	bl	8002924 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000418:	f000 f85e 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	3730      	adds	r7, #48	; 0x30
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000d0 	.word	0x200000d0

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08a      	sub	sp, #40	; 0x28
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0314 	add.w	r3, r7, #20
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043e:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a23      	ldr	r2, [pc, #140]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <MX_GPIO_Init+0xa8>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045a:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <MX_GPIO_Init+0xa8>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000462:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000474:	f043 0302 	orr.w	r3, r3, #2
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_GPIO_Init+0xa8>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0302 	and.w	r3, r3, #2
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <MX_GPIO_Init+0xa8>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_GPIO_Init+0xa8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	480b      	ldr	r0, [pc, #44]	; (80004d4 <MX_GPIO_Init+0xac>)
 80004a6:	f000 fcb1 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	2300      	movs	r3, #0
 80004ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_GPIO_Init+0xac>)
 80004c4:	f000 faf8 	bl	8000ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	; 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000800 	.word	0x48000800

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6613      	str	r3, [r2, #96]	; 0x60
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	6593      	str	r3, [r2, #88]	; 0x58
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0ae      	sub	sp, #184	; 0xb8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	2288      	movs	r2, #136	; 0x88
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f002 fa71 	bl	8002a34 <memset>
  if(hi2c->Instance==I2C1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a42      	ldr	r2, [pc, #264]	; (8000660 <HAL_I2C_MspInit+0x134>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d13b      	bne.n	80005d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800055c:	2340      	movs	r3, #64	; 0x40
 800055e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000560:	2300      	movs	r3, #0
 8000562:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fbdf 	bl	8001d2c <HAL_RCCEx_PeriphCLKConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000574:	f7ff ffb0 	bl	80004d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <HAL_I2C_MspInit+0x138>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057c:	4a39      	ldr	r2, [pc, #228]	; (8000664 <HAL_I2C_MspInit+0x138>)
 800057e:	f043 0302 	orr.w	r3, r3, #2
 8000582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <HAL_I2C_MspInit+0x138>)
 8000586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000596:	2312      	movs	r3, #18
 8000598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a2:	2303      	movs	r3, #3
 80005a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a8:	2304      	movs	r3, #4
 80005aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005b2:	4619      	mov	r1, r3
 80005b4:	482c      	ldr	r0, [pc, #176]	; (8000668 <HAL_I2C_MspInit+0x13c>)
 80005b6:	f000 fa7f 	bl	8000ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <HAL_I2C_MspInit+0x138>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	4a29      	ldr	r2, [pc, #164]	; (8000664 <HAL_I2C_MspInit+0x138>)
 80005c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c4:	6593      	str	r3, [r2, #88]	; 0x58
 80005c6:	4b27      	ldr	r3, [pc, #156]	; (8000664 <HAL_I2C_MspInit+0x138>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005d2:	e040      	b.n	8000656 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a24      	ldr	r2, [pc, #144]	; (800066c <HAL_I2C_MspInit+0x140>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d13b      	bne.n	8000656 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fb9e 	bl	8001d2c <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80005f6:	f7ff ff6f 	bl	80004d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <HAL_I2C_MspInit+0x138>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <HAL_I2C_MspInit+0x138>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_I2C_MspInit+0x138>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000612:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	2312      	movs	r3, #18
 800061c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800062c:	2304      	movs	r3, #4
 800062e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <HAL_I2C_MspInit+0x13c>)
 800063a:	f000 fa3d 	bl	8000ab8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_I2C_MspInit+0x138>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_I2C_MspInit+0x138>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_I2C_MspInit+0x138>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
}
 8000656:	bf00      	nop
 8000658:	37b8      	adds	r7, #184	; 0xb8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40005400 	.word	0x40005400
 8000664:	40021000 	.word	0x40021000
 8000668:	48000400 	.word	0x48000400
 800066c:	40005800 	.word	0x40005800

08000670 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000690:	d128      	bne.n	80006e4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 8000694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6593      	str	r3, [r2, #88]	; 0x58
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 80006a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_TIM_Encoder_MspInit+0x7c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006c2:	2303      	movs	r3, #3
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006d2:	2301      	movs	r3, #1
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 f9ea 	bl	8000ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f892 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <SystemInit+0x20>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <SystemInit+0x20>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800076c:	f7ff ffea 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f002 f955 	bl	8002a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079a:	f7ff fd15 	bl	80001c8 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ac:	08002aec 	.word	0x08002aec
  ldr r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b4:	20000120 	.word	0x20000120

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>

080007ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f943 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f80e 	bl	80007ec <HAL_InitTick>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007dc:	f7ff fe82 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_InitTick+0x6c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d023      	beq.n	8000848 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <HAL_InitTick+0x70>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_InitTick+0x6c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f941 	bl	8000a9e <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10f      	bne.n	8000842 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b0f      	cmp	r3, #15
 8000826:	d809      	bhi.n	800083c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f919 	bl	8000a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <HAL_InitTick+0x74>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	e007      	b.n	800084c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	e004      	b.n	800084c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e001      	b.n	800084c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000008 	.word	0x20000008
 800085c:	20000000 	.word	0x20000000
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	2000011c 	.word	0x2000011c

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000011c 	.word	0x2000011c

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff ffee 	bl	800088c <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffde 	bl	800088c <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff47 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff5c 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffb0 	bl	8000a0c <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	e17f      	b.n	8000dc8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	2101      	movs	r1, #1
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 8171 	beq.w	8000dc2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d005      	beq.n	8000af8 <HAL_GPIO_Init+0x40>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d130      	bne.n	8000b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	2203      	movs	r2, #3
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	f003 0201 	and.w	r2, r3, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d118      	bne.n	8000b98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	f003 0201 	and.w	r2, r3, #1
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d017      	beq.n	8000bd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	2203      	movs	r2, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 0303 	and.w	r3, r3, #3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d123      	bne.n	8000c28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	08da      	lsrs	r2, r3, #3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3208      	adds	r2, #8
 8000be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	08da      	lsrs	r2, r3, #3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3208      	adds	r2, #8
 8000c22:	6939      	ldr	r1, [r7, #16]
 8000c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0203 	and.w	r2, r3, #3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80ac 	beq.w	8000dc2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	; (8000de8 <HAL_GPIO_Init+0x330>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	4a5e      	ldr	r2, [pc, #376]	; (8000de8 <HAL_GPIO_Init+0x330>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6613      	str	r3, [r2, #96]	; 0x60
 8000c76:	4b5c      	ldr	r3, [pc, #368]	; (8000de8 <HAL_GPIO_Init+0x330>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c82:	4a5a      	ldr	r2, [pc, #360]	; (8000dec <HAL_GPIO_Init+0x334>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cac:	d025      	beq.n	8000cfa <HAL_GPIO_Init+0x242>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4f      	ldr	r2, [pc, #316]	; (8000df0 <HAL_GPIO_Init+0x338>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d01f      	beq.n	8000cf6 <HAL_GPIO_Init+0x23e>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <HAL_GPIO_Init+0x33c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d019      	beq.n	8000cf2 <HAL_GPIO_Init+0x23a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x340>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0x236>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_GPIO_Init+0x344>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00d      	beq.n	8000cea <HAL_GPIO_Init+0x232>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_GPIO_Init+0x348>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0x22e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4a      	ldr	r2, [pc, #296]	; (8000e04 <HAL_GPIO_Init+0x34c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_GPIO_Init+0x22a>
 8000cde:	2306      	movs	r3, #6
 8000ce0:	e00c      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	e00a      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	e008      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000cea:	2304      	movs	r3, #4
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e004      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e002      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_Init+0x244>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	f002 0203 	and.w	r2, r2, #3
 8000d02:	0092      	lsls	r2, r2, #2
 8000d04:	4093      	lsls	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d0c:	4937      	ldr	r1, [pc, #220]	; (8000dec <HAL_GPIO_Init+0x334>)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	3302      	adds	r3, #2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d3e:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <HAL_GPIO_Init+0x350>)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f ae78 	bne.w	8000ac8 <HAL_GPIO_Init+0x10>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	371c      	adds	r7, #28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48000c00 	.word	0x48000c00
 8000dfc:	48001000 	.word	0x48001000
 8000e00:	48001400 	.word	0x48001400
 8000e04:	48001800 	.word	0x48001800
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4013      	ands	r3, r2
 8000e54:	041a      	lsls	r2, r3, #16
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43d9      	mvns	r1, r3
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	619a      	str	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e08d      	b.n	8000f9e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d106      	bne.n	8000e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fb48 	bl	800052c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0201 	bic.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ec0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d107      	bne.n	8000eea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	e006      	b.n	8000ef8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ef6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d108      	bne.n	8000f12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	e007      	b.n	8000f22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69d9      	ldr	r1, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f042 0201 	orr.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b20      	cmp	r3, #32
 8000fba:	d138      	bne.n	800102e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e032      	b.n	8001030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2224      	movs	r2, #36	; 0x24
 8000fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ff8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0201 	orr.w	r2, r2, #1
 8001018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800102e:	2302      	movs	r3, #2
  }
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b20      	cmp	r3, #32
 8001050:	d139      	bne.n	80010c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800105c:	2302      	movs	r3, #2
 800105e:	e033      	b.n	80010c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800108e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0201 	orr.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2220      	movs	r2, #32
 80010b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010c6:	2302      	movs	r3, #2
  }
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <HAL_PWREx_GetVoltageRange+0x18>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40007000 	.word	0x40007000

080010f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fe:	d130      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110c:	d038      	beq.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2232      	movs	r2, #50	; 0x32
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9b      	lsrs	r3, r3, #18
 8001130:	3301      	adds	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001134:	e002      	b.n	800113c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3b01      	subs	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001148:	d102      	bne.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x60>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f2      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115c:	d110      	bne.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e00f      	b.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116e:	d007      	beq.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000
 8001194:	20000000 	.word	0x20000000
 8001198:	431bde83 	.word	0x431bde83

0800119c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e3ca      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ae:	4b97      	ldr	r3, [pc, #604]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b8:	4b94      	ldr	r3, [pc, #592]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80e4 	beq.w	8001398 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4a>
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	f040 808b 	bne.w	80012f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 8087 	bne.w	80012f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_RCC_OscConfig+0x62>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e3a2      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1a      	ldr	r2, [r3, #32]
 8001202:	4b82      	ldr	r3, [pc, #520]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_RCC_OscConfig+0x7c>
 800120e:	4b7f      	ldr	r3, [pc, #508]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001216:	e005      	b.n	8001224 <HAL_RCC_OscConfig+0x88>
 8001218:	4b7c      	ldr	r3, [pc, #496]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800121a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001224:	4293      	cmp	r3, r2
 8001226:	d223      	bcs.n	8001270 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fd1d 	bl	8001c6c <RCC_SetFlashLatencyFromMSIRange>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e383      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123c:	4b73      	ldr	r3, [pc, #460]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a72      	ldr	r2, [pc, #456]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b70      	ldr	r3, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	496d      	ldr	r1, [pc, #436]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	4968      	ldr	r1, [pc, #416]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
 800126e:	e025      	b.n	80012bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001270:	4b66      	ldr	r3, [pc, #408]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a65      	ldr	r2, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4960      	ldr	r1, [pc, #384]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	495b      	ldr	r1, [pc, #364]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d109      	bne.n	80012bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fcdd 	bl	8001c6c <RCC_SetFlashLatencyFromMSIRange>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e343      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012bc:	f000 fc4a 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4950      	ldr	r1, [pc, #320]	; (8001410 <HAL_RCC_OscConfig+0x274>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_RCC_OscConfig+0x278>)
 80012da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <HAL_RCC_OscConfig+0x27c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fa83 	bl	80007ec <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d052      	beq.n	8001396 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	e327      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d032      	beq.n	8001362 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001308:	f7ff fac0 	bl	800088c <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001310:	f7ff fabc 	bl	800088c <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e310      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a36      	ldr	r2, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4931      	ldr	r1, [pc, #196]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	492c      	ldr	r1, [pc, #176]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e01a      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136e:	f7ff fa8d 	bl	800088c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001376:	f7ff fa89 	bl	800088c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e2dd      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001388:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x1da>
 8001394:	e000      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001396:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d074      	beq.n	800148e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x21a>
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d10e      	bne.n	80013ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d10b      	bne.n	80013ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d064      	beq.n	800148c <HAL_RCC_OscConfig+0x2f0>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d160      	bne.n	800148c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e2ba      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x24a>
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e026      	b.n	8001434 <HAL_RCC_OscConfig+0x298>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ee:	d115      	bne.n	800141c <HAL_RCC_OscConfig+0x280>
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a02      	ldr	r2, [pc, #8]	; (800140c <HAL_RCC_OscConfig+0x270>)
 8001402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e014      	b.n	8001434 <HAL_RCC_OscConfig+0x298>
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	08002aa4 	.word	0x08002aa4
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004
 800141c:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a9f      	ldr	r2, [pc, #636]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b9d      	ldr	r3, [pc, #628]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a9c      	ldr	r2, [pc, #624]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fa26 	bl	800088c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fa22 	bl	800088c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e276      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001456:	4b92      	ldr	r3, [pc, #584]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x2a8>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fa12 	bl	800088c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fa0e 	bl	800088c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e262      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147e:	4b88      	ldr	r3, [pc, #544]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x2d0>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d060      	beq.n	800155c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d005      	beq.n	80014ac <HAL_RCC_OscConfig+0x310>
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b0c      	cmp	r3, #12
 80014a4:	d119      	bne.n	80014da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d116      	bne.n	80014da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ac:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x328>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e23f      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	061b      	lsls	r3, r3, #24
 80014d2:	4973      	ldr	r1, [pc, #460]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d8:	e040      	b.n	800155c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d023      	beq.n	800152a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff f9cd 	bl	800088c <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff f9c9 	bl	800088c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e21d      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b62      	ldr	r3, [pc, #392]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	495f      	ldr	r1, [pc, #380]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
 8001528:	e018      	b.n	800155c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff f9a9 	bl	800088c <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff f9a5 	bl	800088c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1f9      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001550:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d03c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01c      	beq.n	80015aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001570:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001576:	4a4a      	ldr	r2, [pc, #296]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff f984 	bl	800088c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff f980 	bl	800088c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1d4      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159a:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ef      	beq.n	8001588 <HAL_RCC_OscConfig+0x3ec>
 80015a8:	e01b      	b.n	80015e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	4a3b      	ldr	r2, [pc, #236]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff f967 	bl	800088c <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff f963 	bl	800088c <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e1b7      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	4b32      	ldr	r3, [pc, #200]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1ef      	bne.n	80015c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80a6 	beq.w	800173c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10d      	bne.n	800161c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6593      	str	r3, [r2, #88]	; 0x58
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001618:	2301      	movs	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x508>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d118      	bne.n	800165a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_RCC_OscConfig+0x508>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x508>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001634:	f7ff f92a 	bl	800088c <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff f926 	bl	800088c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e17a      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x508>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_RCC_OscConfig+0x4d8>
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001672:	e029      	b.n	80016c8 <HAL_RCC_OscConfig+0x52c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d115      	bne.n	80016a8 <HAL_RCC_OscConfig+0x50c>
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x52c>
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40007000 	.word	0x40007000
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a9b      	ldr	r2, [pc, #620]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	4b98      	ldr	r3, [pc, #608]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a97      	ldr	r2, [pc, #604]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d016      	beq.n	80016fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff f8dc 	bl	800088c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff f8d8 	bl	800088c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e12a      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ed      	beq.n	80016d8 <HAL_RCC_OscConfig+0x53c>
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff f8c5 	bl	800088c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff f8c1 	bl	800088c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e113      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	4b7f      	ldr	r3, [pc, #508]	; (800191c <HAL_RCC_OscConfig+0x780>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ed      	bne.n	8001706 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172a:	7ffb      	ldrb	r3, [r7, #31]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	4a79      	ldr	r2, [pc, #484]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80fe 	beq.w	8001942 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	2b02      	cmp	r3, #2
 800174c:	f040 80d0 	bne.w	80018f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001750:	4b72      	ldr	r3, [pc, #456]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0203 	and.w	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	429a      	cmp	r2, r3
 8001762:	d130      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	3b01      	subs	r3, #1
 8001770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d127      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d11f      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001790:	2a07      	cmp	r2, #7
 8001792:	bf14      	ite	ne
 8001794:	2201      	movne	r2, #1
 8001796:	2200      	moveq	r2, #0
 8001798:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179a:	4293      	cmp	r3, r2
 800179c:	d113      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	3b01      	subs	r3, #1
 80017c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d06e      	beq.n	80018a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d069      	beq.n	80018a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0ad      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f4:	f7ff f84a 	bl	800088c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f846 	bl	800088c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e09a      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180e:	4b43      	ldr	r3, [pc, #268]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x780>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_RCC_OscConfig+0x784>)
 8001820:	4013      	ands	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800182a:	3a01      	subs	r2, #1
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001834:	0212      	lsls	r2, r2, #8
 8001836:	4311      	orrs	r1, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800183c:	0852      	lsrs	r2, r2, #1
 800183e:	3a01      	subs	r2, #1
 8001840:	0552      	lsls	r2, r2, #21
 8001842:	4311      	orrs	r1, r2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001848:	0852      	lsrs	r2, r2, #1
 800184a:	3a01      	subs	r2, #1
 800184c:	0652      	lsls	r2, r2, #25
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001854:	0912      	lsrs	r2, r2, #4
 8001856:	0452      	lsls	r2, r2, #17
 8001858:	430a      	orrs	r2, r1
 800185a:	4930      	ldr	r1, [pc, #192]	; (800191c <HAL_RCC_OscConfig+0x780>)
 800185c:	4313      	orrs	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a2d      	ldr	r2, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x780>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4a2a      	ldr	r2, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001876:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001878:	f7ff f808 	bl	800088c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f804 	bl	800088c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e058      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x780>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800189e:	e050      	b.n	8001942 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e04f      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d148      	bne.n	8001942 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018c8:	f7fe ffe0 	bl	800088c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe ffdc 	bl	800088c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e030      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x734>
 80018ee:	e028      	b.n	8001942 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_RCC_OscConfig+0x780>)
 80018fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7fe ffc3 	bl	800088c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	e00c      	b.n	8001924 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7fe ffbf 	bl	800088c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d905      	bls.n	8001924 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e013      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
 800191c:	40021000 	.word	0x40021000
 8001920:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_OscConfig+0x7b0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ec      	bne.n	800190a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_OscConfig+0x7b0>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	4905      	ldr	r1, [pc, #20]	; (800194c <HAL_RCC_OscConfig+0x7b0>)
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x7b4>)
 8001938:	4013      	ands	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
 800193c:	e001      	b.n	8001942 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	feeefffc 	.word	0xfeeefffc

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0e7      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b75      	ldr	r3, [pc, #468]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d910      	bls.n	8001998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4970      	ldr	r1, [pc, #448]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b6e      	ldr	r3, [pc, #440]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0cf      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4960      	ldr	r1, [pc, #384]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d04c      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d121      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0a6      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d115      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e09a      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e08e      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e086      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4943      	ldr	r1, [pc, #268]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7fe ff26 	bl	800088c <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7fe ff22 	bl	800088c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e06e      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d010      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d208      	bcs.n	8001a9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	492b      	ldr	r1, [pc, #172]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d210      	bcs.n	8001aca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 0207 	bic.w	r2, r3, #7
 8001ab0:	4923      	ldr	r1, [pc, #140]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_RCC_ClockConfig+0x1ec>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e036      	b.n	8001b38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4918      	ldr	r1, [pc, #96]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4910      	ldr	r1, [pc, #64]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b08:	f000 f824 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	490b      	ldr	r1, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1f4>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1f8>)
 8001b26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1fc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fe5d 	bl	80007ec <HAL_InitTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b36:	7afb      	ldrb	r3, [r7, #11]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40022000 	.word	0x40022000
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08002aa4 	.word	0x08002aa4
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x34>
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d121      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d11e      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e004      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d134      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0xa6>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d003      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0xac>
 8001bf8:	e005      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bfc:	617b      	str	r3, [r7, #20]
      break;
 8001bfe:	e005      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c02:	617b      	str	r3, [r7, #20]
      break;
 8001c04:	e002      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	617b      	str	r3, [r7, #20]
      break;
 8001c0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	fb03 f202 	mul.w	r2, r3, r2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	0e5b      	lsrs	r3, r3, #25
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08002ab4 	.word	0x08002ab4
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c84:	f7ff fa26 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
 8001c88:	6178      	str	r0, [r7, #20]
 8001c8a:	e014      	b.n	8001cb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ca4:	f7ff fa16 	bl	80010d4 <HAL_PWREx_GetVoltageRange>
 8001ca8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbc:	d10b      	bne.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d919      	bls.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2ba0      	cmp	r3, #160	; 0xa0
 8001cc8:	d902      	bls.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cca:	2302      	movs	r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	e013      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e010      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d902      	bls.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cdc:	2303      	movs	r3, #3
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e00a      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b80      	cmp	r3, #128	; 0x80
 8001ce6:	d102      	bne.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ce8:	2302      	movs	r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e004      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b70      	cmp	r3, #112	; 0x70
 8001cf2:	d101      	bne.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 0207 	bic.w	r2, r3, #7
 8001d00:	4909      	ldr	r1, [pc, #36]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40022000 	.word	0x40022000

08001d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d34:	2300      	movs	r3, #0
 8001d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d041      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d50:	d02a      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d56:	d824      	bhi.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d5c:	d008      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d62:	d81e      	bhi.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d6e:	e018      	b.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d70:	4b86      	ldr	r3, [pc, #536]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4a85      	ldr	r2, [pc, #532]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d7c:	e015      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fabb 	bl	8002300 <RCCEx_PLLSAI1_Config>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d8e:	e00c      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3320      	adds	r3, #32
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fba6 	bl	80024e8 <RCCEx_PLLSAI2_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da0:	e003      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	74fb      	strb	r3, [r7, #19]
      break;
 8001da6:	e000      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001daa:	7cfb      	ldrb	r3, [r7, #19]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dc6:	e001      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc8:	7cfb      	ldrb	r3, [r7, #19]
 8001dca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d041      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ddc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001de0:	d02a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001de2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001de6:	d824      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dec:	d008      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df2:	d81e      	bhi.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dfe:	e018      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e0c:	e015      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fa73 	bl	8002300 <RCCEx_PLLSAI1_Config>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e1e:	e00c      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3320      	adds	r3, #32
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fb5e 	bl	80024e8 <RCCEx_PLLSAI2_Config>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e30:	e003      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	74fb      	strb	r3, [r7, #19]
      break;
 8001e36:	e000      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e4e:	494f      	ldr	r1, [pc, #316]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e56:	e001      	b.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a0 	beq.w	8001faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eac:	f7fe fcee 	bl	800088c <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb2:	e009      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb4:	f7fe fcea 	bl	800088c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d902      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ef      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d15c      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01f      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d019      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7fe fca9 	bl	800088c <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fca5 	bl	800088c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d902      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	74fb      	strb	r3, [r7, #19]
            break;
 8001f54:	e006      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ec      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f7a:	4904      	ldr	r1, [pc, #16]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f82:	e009      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
 8001f88:	e006      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f98:	7c7b      	ldrb	r3, [r7, #17]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b9e      	ldr	r3, [pc, #632]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	4a9d      	ldr	r2, [pc, #628]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb6:	4b98      	ldr	r3, [pc, #608]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f023 0203 	bic.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	4994      	ldr	r1, [pc, #592]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f023 020c 	bic.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe6:	498c      	ldr	r1, [pc, #560]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4983      	ldr	r1, [pc, #524]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	497b      	ldr	r1, [pc, #492]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	4972      	ldr	r1, [pc, #456]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002060:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	496a      	ldr	r1, [pc, #424]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	4961      	ldr	r1, [pc, #388]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a4:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	4959      	ldr	r1, [pc, #356]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c6:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d4:	4950      	ldr	r1, [pc, #320]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	4948      	ldr	r1, [pc, #288]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800210a:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	493f      	ldr	r1, [pc, #252]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d028      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	4937      	ldr	r1, [pc, #220]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800214a:	d106      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800214c:	4b32      	ldr	r3, [pc, #200]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a31      	ldr	r2, [pc, #196]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002156:	60d3      	str	r3, [r2, #12]
 8002158:	e011      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002162:	d10c      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	2101      	movs	r1, #1
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f8c8 	bl	8002300 <RCCEx_PLLSAI1_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800217a:	7cfb      	ldrb	r3, [r7, #19]
 800217c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d028      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	491f      	ldr	r1, [pc, #124]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b4:	60d3      	str	r3, [r2, #12]
 80021b6:	e011      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f899 	bl	8002300 <RCCEx_PLLSAI1_Config>
 80021ce:	4603      	mov	r3, r0
 80021d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d02b      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002206:	d109      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a02      	ldr	r2, [pc, #8]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	60d3      	str	r3, [r2, #12]
 8002214:	e014      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002224:	d10c      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	2101      	movs	r1, #1
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f867 	bl	8002300 <RCCEx_PLLSAI1_Config>
 8002232:	4603      	mov	r3, r0
 8002234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d02f      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800225a:	4928      	ldr	r1, [pc, #160]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800226a:	d10d      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2102      	movs	r1, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f844 	bl	8002300 <RCCEx_PLLSAI1_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d014      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	74bb      	strb	r3, [r7, #18]
 8002286:	e011      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800228c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002290:	d10c      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3320      	adds	r3, #32
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f925 	bl	80024e8 <RCCEx_PLLSAI2_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c6:	490d      	ldr	r1, [pc, #52]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ea:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d018      	beq.n	800234c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0203 	and.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d10d      	bne.n	8002346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
       ||
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002332:	4b6c      	ldr	r3, [pc, #432]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
       ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d047      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e044      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d018      	beq.n	8002386 <RCCEx_PLLSAI1_Config+0x86>
 8002354:	2b03      	cmp	r3, #3
 8002356:	d825      	bhi.n	80023a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002358:	2b01      	cmp	r3, #1
 800235a:	d002      	beq.n	8002362 <RCCEx_PLLSAI1_Config+0x62>
 800235c:	2b02      	cmp	r3, #2
 800235e:	d009      	beq.n	8002374 <RCCEx_PLLSAI1_Config+0x74>
 8002360:	e020      	b.n	80023a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002362:	4b60      	ldr	r3, [pc, #384]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d11d      	bne.n	80023aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002372:	e01a      	b.n	80023aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002374:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d116      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002384:	e013      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002386:	4b57      	ldr	r3, [pc, #348]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002392:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a2:	e006      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      break;
 80023a8:	e004      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023aa:	bf00      	nop
 80023ac:	e002      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10d      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	430b      	orrs	r3, r1
 80023d0:	4944      	ldr	r1, [pc, #272]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d17d      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a40      	ldr	r2, [pc, #256]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe fa50 	bl	800088c <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ee:	e009      	b.n	8002404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f0:	f7fe fa4c 	bl	800088c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d902      	bls.n	8002404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	73fb      	strb	r3, [r7, #15]
        break;
 8002402:	e005      	b.n	8002410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002404:	4b37      	ldr	r3, [pc, #220]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ef      	bne.n	80023f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d160      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d111      	bne.n	8002440 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800241c:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6892      	ldr	r2, [r2, #8]
 800242c:	0211      	lsls	r1, r2, #8
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	0912      	lsrs	r2, r2, #4
 8002434:	0452      	lsls	r2, r2, #17
 8002436:	430a      	orrs	r2, r1
 8002438:	492a      	ldr	r1, [pc, #168]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	610b      	str	r3, [r1, #16]
 800243e:	e027      	b.n	8002490 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d112      	bne.n	800246c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002446:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800244e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6892      	ldr	r2, [r2, #8]
 8002456:	0211      	lsls	r1, r2, #8
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6912      	ldr	r2, [r2, #16]
 800245c:	0852      	lsrs	r2, r2, #1
 800245e:	3a01      	subs	r2, #1
 8002460:	0552      	lsls	r2, r2, #21
 8002462:	430a      	orrs	r2, r1
 8002464:	491f      	ldr	r1, [pc, #124]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	610b      	str	r3, [r1, #16]
 800246a:	e011      	b.n	8002490 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	0211      	lsls	r1, r2, #8
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6952      	ldr	r2, [r2, #20]
 8002482:	0852      	lsrs	r2, r2, #1
 8002484:	3a01      	subs	r2, #1
 8002486:	0652      	lsls	r2, r2, #25
 8002488:	430a      	orrs	r2, r1
 800248a:	4916      	ldr	r1, [pc, #88]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe f9f6 	bl	800088c <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a2:	e009      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a4:	f7fe f9f2 	bl	800088c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	73fb      	strb	r3, [r7, #15]
          break;
 80024b6:	e005      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4904      	ldr	r1, [pc, #16]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d018      	beq.n	8002534 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002502:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0203 	and.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d10d      	bne.n	800252e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
       ||
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800251a:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
       ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d047      	beq.n	80025be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e044      	b.n	80025be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d018      	beq.n	800256e <RCCEx_PLLSAI2_Config+0x86>
 800253c:	2b03      	cmp	r3, #3
 800253e:	d825      	bhi.n	800258c <RCCEx_PLLSAI2_Config+0xa4>
 8002540:	2b01      	cmp	r3, #1
 8002542:	d002      	beq.n	800254a <RCCEx_PLLSAI2_Config+0x62>
 8002544:	2b02      	cmp	r3, #2
 8002546:	d009      	beq.n	800255c <RCCEx_PLLSAI2_Config+0x74>
 8002548:	e020      	b.n	800258c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800254a:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11d      	bne.n	8002592 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800255a:	e01a      	b.n	8002592 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800255c:	4b50      	ldr	r3, [pc, #320]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256c:	e013      	b.n	8002596 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10f      	bne.n	800259a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800258a:	e006      	b.n	800259a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      break;
 8002590:	e004      	b.n	800259c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002592:	bf00      	nop
 8002594:	e002      	b.n	800259c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800259a:	bf00      	nop
    }

    if(status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	430b      	orrs	r3, r1
 80025b8:	4939      	ldr	r1, [pc, #228]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d167      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025c4:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d0:	f7fe f95c 	bl	800088c <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d6:	e009      	b.n	80025ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025d8:	f7fe f958 	bl	800088c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d902      	bls.n	80025ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	73fb      	strb	r3, [r7, #15]
        break;
 80025ea:	e005      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025ec:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ef      	bne.n	80025d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d14a      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d111      	bne.n	8002628 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6892      	ldr	r2, [r2, #8]
 8002614:	0211      	lsls	r1, r2, #8
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	0912      	lsrs	r2, r2, #4
 800261c:	0452      	lsls	r2, r2, #17
 800261e:	430a      	orrs	r2, r1
 8002620:	491f      	ldr	r1, [pc, #124]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	614b      	str	r3, [r1, #20]
 8002626:	e011      	b.n	800264c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	0211      	lsls	r1, r2, #8
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6912      	ldr	r2, [r2, #16]
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0652      	lsls	r2, r2, #25
 8002644:	430a      	orrs	r2, r1
 8002646:	4916      	ldr	r1, [pc, #88]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe f918 	bl	800088c <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800265e:	e009      	b.n	8002674 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002660:	f7fe f914 	bl	800088c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	73fb      	strb	r3, [r7, #15]
          break;
 8002672:	e005      	b.n	8002680 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4904      	ldr	r1, [pc, #16]	; (80026a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	4313      	orrs	r3, r2
 8002692:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e097      	b.n	80027e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fd ffcf 	bl	8000670 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80026e8:	f023 0307 	bic.w	r3, r3, #7
 80026ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f000 f879 	bl	80027f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	4313      	orrs	r3, r2
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002744:	f023 030c 	bic.w	r3, r3, #12
 8002748:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	4313      	orrs	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	011a      	lsls	r2, r3, #4
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	4313      	orrs	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002782:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800278a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4313      	orrs	r3, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a40      	ldr	r2, [pc, #256]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00f      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <TIM_Base_SetConfig+0x118>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00b      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3c      	ldr	r2, [pc, #240]	; (800290c <TIM_Base_SetConfig+0x11c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <TIM_Base_SetConfig+0x114>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d01b      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <TIM_Base_SetConfig+0x118>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d017      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2b      	ldr	r2, [pc, #172]	; (800290c <TIM_Base_SetConfig+0x11c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2a      	ldr	r2, [pc, #168]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a29      	ldr	r2, [pc, #164]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a28      	ldr	r2, [pc, #160]	; (8002918 <TIM_Base_SetConfig+0x128>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <TIM_Base_SetConfig+0x12c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a26      	ldr	r2, [pc, #152]	; (8002920 <TIM_Base_SetConfig+0x130>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d00f      	beq.n	80028e8 <TIM_Base_SetConfig+0xf8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <TIM_Base_SetConfig+0x124>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <TIM_Base_SetConfig+0xf8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <TIM_Base_SetConfig+0x128>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_Base_SetConfig+0xf8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <TIM_Base_SetConfig+0x12c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0xf8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <TIM_Base_SetConfig+0x130>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	615a      	str	r2, [r3, #20]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800
 8002910:	40000c00 	.word	0x40000c00
 8002914:	40013400 	.word	0x40013400
 8002918:	40014000 	.word	0x40014000
 800291c:	40014400 	.word	0x40014400
 8002920:	40014800 	.word	0x40014800

08002924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002938:	2302      	movs	r3, #2
 800293a:	e068      	b.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2e      	ldr	r2, [pc, #184]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2d      	ldr	r2, [pc, #180]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d108      	bne.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d018      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10c      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40013400 	.word	0x40013400
 8002a24:	40000400 	.word	0x40000400
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	40000c00 	.word	0x40000c00
 8002a30:	40014000 	.word	0x40014000

08002a34 <memset>:
 8002a34:	4402      	add	r2, r0
 8002a36:	4603      	mov	r3, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d100      	bne.n	8002a3e <memset+0xa>
 8002a3c:	4770      	bx	lr
 8002a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a42:	e7f9      	b.n	8002a38 <memset+0x4>

08002a44 <__libc_init_array>:
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	4d0d      	ldr	r5, [pc, #52]	; (8002a7c <__libc_init_array+0x38>)
 8002a48:	4c0d      	ldr	r4, [pc, #52]	; (8002a80 <__libc_init_array+0x3c>)
 8002a4a:	1b64      	subs	r4, r4, r5
 8002a4c:	10a4      	asrs	r4, r4, #2
 8002a4e:	2600      	movs	r6, #0
 8002a50:	42a6      	cmp	r6, r4
 8002a52:	d109      	bne.n	8002a68 <__libc_init_array+0x24>
 8002a54:	4d0b      	ldr	r5, [pc, #44]	; (8002a84 <__libc_init_array+0x40>)
 8002a56:	4c0c      	ldr	r4, [pc, #48]	; (8002a88 <__libc_init_array+0x44>)
 8002a58:	f000 f818 	bl	8002a8c <_init>
 8002a5c:	1b64      	subs	r4, r4, r5
 8002a5e:	10a4      	asrs	r4, r4, #2
 8002a60:	2600      	movs	r6, #0
 8002a62:	42a6      	cmp	r6, r4
 8002a64:	d105      	bne.n	8002a72 <__libc_init_array+0x2e>
 8002a66:	bd70      	pop	{r4, r5, r6, pc}
 8002a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6c:	4798      	blx	r3
 8002a6e:	3601      	adds	r6, #1
 8002a70:	e7ee      	b.n	8002a50 <__libc_init_array+0xc>
 8002a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a76:	4798      	blx	r3
 8002a78:	3601      	adds	r6, #1
 8002a7a:	e7f2      	b.n	8002a62 <__libc_init_array+0x1e>
 8002a7c:	08002ae4 	.word	0x08002ae4
 8002a80:	08002ae4 	.word	0x08002ae4
 8002a84:	08002ae4 	.word	0x08002ae4
 8002a88:	08002ae8 	.word	0x08002ae8

08002a8c <_init>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	bf00      	nop
 8002a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a92:	bc08      	pop	{r3}
 8002a94:	469e      	mov	lr, r3
 8002a96:	4770      	bx	lr

08002a98 <_fini>:
 8002a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9a:	bf00      	nop
 8002a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9e:	bc08      	pop	{r3}
 8002aa0:	469e      	mov	lr, r3
 8002aa2:	4770      	bx	lr
